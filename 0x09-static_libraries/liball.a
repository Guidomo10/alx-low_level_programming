!<arch>
0-isupper.c/    0           0     0     644     230       `
#include "main.h"

/**
 * _isupper - a function that checks for uppercase character
 * @c: input
 * Return: 1 if c is uppercase, 0 otherwise
 */

int _isupper(int c)

{
if ((c >= 'A') && (c <= 'Z'))
return (1);
else
return (0);
}
0-memset.c/     0           0     0     644     301       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte.
 * @s: memory area
 * @b: constant byte
 * @n: bytes of memory
 *
 * Return: pointer to the memory area s.
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int a;
for (a = 0; a < n; a++)
{
s[a] = b;
}
return (s);
}


0-strcat.c/     0           0     0     644     312       `
#include "main.h"

/**
 * _strcat - concatenates two strings.
 * @dest: character
 * @src: character
 *
 * Return: dest
 */

char *_strcat(char *dest, char *src)
{
int dlen = 0, i;

while (dest[dlen])
{
dlen++;
}
for (i = 0; src[i] != 0; i++)
{
dest[dlen] = src[i];
dlen++;
}
dest[dlen] = '\0';
return (dest);
}
100-atoi.c/     0           0     0     644     346       `
#include "main.h"

/**
 * _atoi - convert a string to an integer
 * @s: string
 * return: int
 */

int _atoi(char *s)
{
int i, j, n, x;
i = n = 0;
x = 1;
while ((s[i] < '0' || s[i] > '9') && (s[i] != '\0'))
{
if (s[i] == '-')
x *= -1;
i++;
}
j = 1;
while ((s[j] >= '0') && (s[j] <= '9'))
{
n = (n * 10) + x * ((s[j]) - '0');
j++;
}
return (n);
}
1-isdigit.c/    0           0     0     644     219       `
#include "main.h"

/**
 * _isdigit -  a function that checks for a digit 0-9
 * @c: input
 * Return: 1 if c is a digit, 0 otherwise
 */

int _isdigit(int c)

{
if ((c >= 48) && (c <= 57))
return (1);
else
return (0);
}

1-memcpy.c/     0           0     0     644     352       `
#include "main.h"

/**
 * _memcpy - copies memory area.
 * @dest: destination of memory area.
 * @src: source of memory area.
 * @n: bytes from memory area to copy.
 *
 * Return: detination of memory area copyed.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int a;
for (a = 0; a < n; a++)
{
dest[a] = src[a];
}
return (dest);
}
1-strncat.c/    0           0     0     644     373       `
#include "main.h"

/**
 * _strncat - concatenates two strings.
 * @dest: value destination.
 * @src: source destination.
 * @n: n bytes limit
 *
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
int dlen = 0, j = 0;

while (dest[dlen])
{
dlen++;
}
while (j < n && src[j])
{
dest[dlen] = src[j];
dlen++;
j++;
}
dest[dlen + n + 1] = '\0';
return (dest);
}


2-strchr.c/     0           0     0     644     286       `
#include "main.h"

/**
 * _strchr -  locates a character in a string.
 * @c: character in the string to found
 * @s: source string
 *
 * Return: pointer to character or NULL if not found.
 */

char *_strchr(char *s, char c)
{
do {
if (*s == c)
{
break;
}
} while (*s++);
return (s);
}

2-strlen.c/     0           0     0     644     187       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: char
 * return: int
 */
int _strlen(char *s)
{
int i;
for (i = 0; s[i] != '\0'; i++)
{
continue;
}
return (i);
}

2-strncpy.c/    0           0     0     644     357       `
#include "main.h"

/**
 * _strncpy  - copy a string.
 * @dest: value destination.
 * @src: value source.
 * @n: copy value limit.
 *
 * Return: char value.
 */

char *_strncpy(char *dest, char *src, int n)
{
int a = 0, b = 0;
while (src[b])
{
b++;
}
while (a < n && src[a])
{
dest[a] = src[a];
a++;
}
while (a < n)
{
dest[a] = '\0';
a++;
}
return (dest);
}

3-islower.c/    0           0     0     644     237       `
#include "main.h"

/**
 * _islower - checks for lowercase character.
 * @c: character to be checks
 *
 * Return: 1 if is lowercase character, otherwise 0.
 */

int _islower(int c)
{
if (c >= 97 && c <= 122)
{
return (1);
}
return (0);
}

3-puts.c/       0           0     0     644     205       `
#include "main.h"

/**
 * _puts - prints a string
 * @str: pointer char
 * return: void
 */

void _puts(char *str)
{
int i;
for (i = 0; str[i] != '\0'; i++)
{
_putchar(str[i]);
}
_putchar('\n');
return;
}

3-strcmp.c/     0           0     0     644     406       `
#include "main.h"

/**
 * _strcmp - compare two strings.
 * @s1: first string.
 * @s2: second string.
 *
 * Return: int value.
 */

int _strcmp(char *s1, char *s2)
{
int a = 0, b = 0, c = 0, r = 0, lim;
while (s1[a])
{
a++;
}
while (s2[b])
{
b++;
}
if (a <= b)
{
lim = a;
}
else
{
lim = b;
}
while (c <= lim)
{
if (s1[c] == s2[c])
{
c++;
continue;
}
else
{
r = s1[c] - s2[c];
break;
}
c++;
}
return (r);
}
3-strspn.c/     0           0     0     644     360       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring.
 * @s: source string.
 * @accept: accept source
 *
 * Return: bytes number in the init segment.
 */

unsigned int _strspn(char *s, char *accept)
{
unsigned int a = 0, b, t = 0;
while (accept[a])
{
b = 0;
while (s[b] != 32)
{
if (accept[a] == s[b])
{
t++;
}
b++;
}
a++;
}
return (t);
}
4-isalpha.c/    0           0     0     644     277       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character.
 * @c: character to be cheks
 *
 * Return: 1 if c is a letter, lowercase or uppercase otherwise 0.
 */

int _isalpha(int c)
{
if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
{
return (1);
}
return (0);
}

4-strpbrk.c/    0           0     0     644     346       `
#include "main.h"

/**
 * _strpbrk - searches a string for any of a set of bytes.
 * @s: string source
 * @accept: string of accept character
 *
 * Return: first found accepted character.
 */

char *_strpbrk(char *s, char *accept)
{
int i;
while (*s)
{
for (i = 0; accept[i]; i++)
{
if (*s == accept[i])
{
return (s);
}
}
s++;
}
return ('\0');
}
5-strstr.c/     0           0     0     644     457       `
#include "main.h"

/**
 * _strstr -  locates a substring.
 * @needle: first string.
 * @haystack: second string.
 *
 * Return: pointer to the beginning of the located substring.
 */

char *_strstr(char *haystack, char *needle)
{
int x;
if (*needle == 0)
return (haystack);
while (*haystack)
{
x = 0;
if (haystack[x] == needle[x])
{
do {
if (needle[x + 1] == '\0')
return (haystack);
x++;
} while (haystack[x] == needle[x]);
}
haystack++;
}
return ('\0');
}

6-abs.c/        0           0     0     644     247       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer.
 * @l: computed integer.
 *
 * Return: absolute value of number or 0.
 */

int _abs(int l)
{
if (l < 0)
{
int abs_val;
abs_val = l * -1;
return (abs_val);
}
return (l);
}

9-strcpy.c/     0           0     0     644     242       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed
 * @dest: char
 * @src: char
 * return: char
 */

char *_strcpy(char *dest, char *src)
{

int i;
i = 0;
while (src[i])
{
dest[i] = src[i];
i++;
}
dest[i] = '\0';
return (dest);
}
main.c/         0           0     0     644     141       `
#include "main.h"

int main(void);
{
_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin
Mitnick");
return (0);
}

_putchar.c/     0           0     0     644     157       `
#include "main.h"

/**
 * _putchar - print character c.
 *@c: character to print
 *
 * Return: always 0 (success).
 */

int _putchar(char c)
{
return (0);
}

